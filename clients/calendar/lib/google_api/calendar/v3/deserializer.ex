# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule GoogleApi.Calendar.V3.Deserializer do
  @moduledoc """
  Helper functions for deserializing responses into structs
  """

  import Poison.Decode, only: [decode: 2]
  import Poison.Encoder, only: [encode: 2]

  @doc """
  Update the provided struct with a deserialized nested value
  """
  @spec deserialize(struct(), atom(), atom(), module(), keyword()) :: any()
  def deserialize(struct, _field, :list, nil, _options), do: struct

  def deserialize(struct, field, :list, mod, options) do
    opts = Keyword.merge(options, as: [struct(mod)])
    Map.update!(struct, field, &decode(&1, opts))
  end

  def deserialize(struct, field, :struct, mod, options) do
    opts = Keyword.merge(options, as: struct(mod))
    Map.update!(struct, field, &decode(&1, opts))
  end

  def deserialize(struct, _field, :map, nil, _options), do: struct

  def deserialize(struct, field, :map, mod, options) do
    Map.update!(
      struct
      field,
      &Map.new(&1 || %{}, fn {key, val} ->
        opts = Keyword.merge(options, as: struct(mod))
        {key, decode(val, opts)}
      end)
    )
  end

  def deserialize(struct, field, :date, _, _options) do
    Map.update(struct, field, nil, &parse_date/1)
  end

  def serialize_non_nil(struct, options) do
    struct
    |> Map.from_struct()
    |> Enum.filter(fn {_k, v} -> v != nil end)
    |> Enum.into(%{})
    |> encode(options)
  end

  defp parse_date(nil), do: nil

  defp parse_date(iso8601) do
    case DateTime.from_iso8601(iso8601) do
      {:ok, datetime, _offset} -> datetime
      _ -> iso8601
    end
  end
end
